tosca_definitions_version: cloudify_dsl_1_3

description: >
  Create an Example Openstack Network with RBAC policy

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:
  keystone_username:
    default: { get_secret: keystone_username }

  keystone_password:
    default: { get_secret: keystone_password }

  keystone_tenant_name:
    default: { get_secret: keystone_tenant_name }

  keystone_url:
    default: { get_secret: keystone_url }

  region:
    default: { get_secret: region }

  subnet_cidr:
    type: string
    default: '192.168.1.0/24'

  admin_project_id:
    type: string

  rbac_policy_tenant_name:
    type: string

dsl_definitions:
  openstack_config: &openstack_admin_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    insecure: true
    custom_configuration:
      keystone_client:
        interface: public

  openstack_config: &openstack_tenant_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: rbac_policy_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    insecure: true
    custom_configuration:
      keystone_client:
        interface: public

node_templates:
  network_rbac_policy:
    type: cloudify.openstack.nodes.RBACPolicy
    properties:
      rbac_policy:
        target_tenant: { get_input: admin_project_id }
        action: access_as_shared
      openstack_config: *openstack_admin_config
    relationships:
      - type: cloudify.openstack.rbac_policy_applied_to
        target: network

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_tenant_config

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_tenant_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              ip_version: 4
              cidr: { get_input: subnet_cidr }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network

outputs:
  network:
    value: { get_attribute: [ network, external_id ] }
  subnet:
    value: { get_attribute: [ subnet, external_id ] }
  network_rbac_policy:
    value: { get_attribute: [ network_rbac_policy, external_id ] }

