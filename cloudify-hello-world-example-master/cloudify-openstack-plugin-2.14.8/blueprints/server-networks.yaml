tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:

  username:
    type: string

  keystone_password:
    type: string

  tenant_name:
    type: string

  auth_url:
    type: string

  region:
    type: string

  external_network_name:
    type: string

  network_id:
    type: string

  subnet_id:
    type: string

  fixed_ip:
    type: string

  ubuntu_trusty_image:
    type: string

  small_image_flavor:
    type: string

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: tenant_name }
    auth_url: { get_input: auth_url }
    region: { get_input: region }

node_templates:

  server:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_config
      agent_config:
        install_method: none
      server:
        image: { get_input: ubuntu_trusty_image }
        flavor: { get_input: small_image_flavor }
    relationships:
      - target: network
        type: cloudify.relationships.contained_in
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: port
        type: cloudify.openstack.server_connected_to_port

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: example-key
      private_key_path: { concat: [ '~/.ssh/', { get_property: [ SELF, resource_id ] }, '.pem' ] }

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
      fixed_ip: { get_input: fixed_ip }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: ip

  ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: subnet_id }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.openstack.subnet_connected_to_router
        target: router

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: network_id }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        description: My Test Security Group

groups:

  heal_group:
    members: [server, port, ip]

policies:

  heal_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [heal_group]
