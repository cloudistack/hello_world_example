#Blueprint used for testing 'use_external_resource' mode for these node_types:
#
#* cloudify.openstack.nodes.Flavor
#* cloudify.openstack.nodes.Image
#* cloudify.openstack.nodes.Project
#* cloudify.openstack.nodes.User
#* cloudify.openstack.nodes.HostAggregate
#

tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:
  openstack_username:
    type: string
    default: { get_secret: keystone_username }

  openstack_password:
    type: string
    default: { get_secret: keystone_password }

  openstack_auth_url:
    type: string
    default: { get_secret: keystone_url }

  openstack_region:
    type: string
    default: { get_secret: keystone_region }

  openstack_admin_tenant_name: # should admin_tenant name be required to provision new tenet / user ?
    type: string
    default: 'admin'

dsl_definitions:
  openstack_config: &openstack_config
    username: { get_input: openstack_username }
    password: { get_input: openstack_password }
    tenant_name: { get_input: openstack_admin_tenant_name }
    auth_url: { get_input: openstack_auth_url }
    region: { get_input: openstack_region }

node_templates:
  test_user:
    type: cloudify.openstack.nodes.User
    properties:
      use_external_resource: true
      resource_id: 'openstack_plugin_test_user'
      openstack_config: *openstack_config

  test_project:
    type: cloudify.openstack.nodes.Project
    properties:
      use_external_resource: true
      resource_id: 'openstack_plugin_test_project'
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: test_user

  test_flavor:
    type: cloudify.openstack.nodes.Flavor
    properties:
      use_external_resource: true
      resource_id: 'openstack_plugin_test_flavor'
      openstack_config:
        username: { get_input: openstack_username }
        password: { get_input: openstack_password }
        auth_url: { get_input: openstack_auth_url }
        region: { get_input: openstack_region }
        tenant_name: { get_attribute: [test_project, external_name] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: test_project

  test_image:
    type: cloudify.openstack.nodes.Image
    properties:
      use_external_resource: true
      resource_id: 'openstack_plugin_test_image'
      openstack_config:
        username: { get_input: openstack_username }
        password: { get_input: openstack_password }
        auth_url: { get_input: openstack_auth_url }
        region: { get_input: openstack_region }
        tenant_name: { get_attribute: [test_project, external_name] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: test_project

  test_host_aggregate:
    type: cloudify.openstack.nodes.HostAggregate
    properties:
      use_external_resource: true
      resource_id: 'openstack_plugin_test_image'
      openstack_config:
        username: { get_input: openstack_username }
        password: { get_input: openstack_password }
        auth_url: { get_input: openstack_auth_url }
        region: { get_input: openstack_region }
        tenant_name: { get_attribute: [test_project, external_name] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: test_project
