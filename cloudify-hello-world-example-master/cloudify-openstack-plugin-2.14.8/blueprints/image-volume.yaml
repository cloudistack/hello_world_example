tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - plugin:cloudify-openstack-plugin

inputs:

  keystone_username:
    default: { get_secret: keystone_username }

  keystone_password:
    default: { get_secret: keystone_password }

  keystone_tenant_name:
    default: { get_secret: keystone_tenant_name }

  keystone_url:
    default: { get_secret: keystone_url }

  region:
    default: { get_secret: region }

  external_network_name:
    default: { get_secret: external_network_name }

  security_group_rules:
    default:
    - remote_ip_prefix: 0.0.0.0/0
      port: 22

  volume1_use_existing:
    default: false

  volume1_name:
    default: volume1_name

  volume1_size:
    default: 1

  volume2_use_existing:
    default: false

  volume2_name:
    default: volume2_name

  volume2_size:
    default: 1

  image:
    type: string
    default: ''

  flavor:
    type: string
    default: 4

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_templates:

  # image_volume_server:
  #   type: cloudify.openstack.nodes.Server
  #   properties:
  #     openstack_config: *openstack_config
  #     agent_config:
  #       install_method: none
  #     server: {}
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       create:
  #         inputs:
  #           args:
  #             image: { get_input: image }
  #             flavor: { get_input: flavor }
  #             availability_zone: nova
  #             # block_device_mapping_v2:
  #             # - device_name: vda
  #             #   boot_index: "0"
  #             #   uuid: { get_attribute: [volume1, external_id ] }
  #             #   source_type: volume
  #             #   volume_size: { get_property: [ volume1, volume, size ] }
  #             #   delete_on_termination: false
  #             # - device_name: vda
  #             #   boot_index: "1"
  #             #   uuid: { get_attribute: [volume2, external_id ] }
  #             #   source_type: volume
  #             #   volume_size: { get_property: [ volume2, volume, size ] }
  #             #   delete_on_termination: false
  #   relationships:
  #     - target: image_volume_example_key
  #       type: cloudify.openstack.server_connected_to_keypair
  #     - target: public_subnet_nic
  #       type: cloudify.openstack.server_connected_to_port
  #     - target: private_subnet_nic
  #       type: cloudify.openstack.server_connected_to_port
  #     # - target: volume2
  #     #   type: cloudify.relationships.depends_on
  #     # - target: volume1
  #     #   type: cloudify.relationships.depends_on

  # image_volume_example_key:
  #   type: cloudify.openstack.nodes.KeyPair
  #   properties:
  #     openstack_config: *openstack_config
  #     resource_id: image-volume-example-key
  #     private_key_path: { concat: [ '~/.ssh/', { get_property: [ SELF, resource_id ] }, '.pem' ] }

  # volume2:
  #   type: cloudify.openstack.nodes.Volume
  #   properties:
  #     openstack_config: *openstack_config
  #     use_external_resource: { get_input: volume2_use_existing }
  #     resource_id: { get_input: volume2_name }
  #     volume:
  #       size: { get_input: volume2_size }

  # volume1:
  #   type: cloudify.openstack.nodes.Volume
  #   properties:
  #     openstack_config: *openstack_config
  #     use_external_resource: { get_input: volume1_use_existing }
  #     resource_id: { get_input: volume1_name }
  #     volume:
  #       size: { get_input: volume1_size }

  image:
     type: cloudify.openstack.nodes.Image
     properties:
       image:
         container_format: "bare"
         disk_format: "qcow2"
       openstack_config: *openstack_config
       image_url: {get_input : image_url }
       use_external_resource: true
       create_if_missing: true
       resource_id: { concat: [{get_input: vnf_name}, "-image"] }

  volume:
    type: cloudify.openstack.nodes.Volume
    properties:
      openstack_config: *openstack_config
      volume:
        size: 60
        imageRef: 'create operation inputs override'
        volume_type: { get_input: volume_type }
      boot: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              size: { get_property: [ SELF, volume, size ] }
              imageRef: { get_attribute: [ image, external_id ] }
              volume_type: { get_property: [ SELF, volume, volume_type ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: image

  public_subnet_nic:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: public_ip

  private_subnet_nic:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: basic_security_group
      rules: { get_input: security_group_rules }

  public_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      resource_id: private_subnet
      subnet:
        ip_version: 4
        cidr: 10.1.0.0/16
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      resource_id: private_network

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      resource_id: public_subnet
      subnet:
        ip_version: 4
        cidr: 10.0.0.0/16
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      resource_id: public_network

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      resource_id: router
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }
